# - *- coding: utf- 8 - *-
from aiogram import BaseMiddleware, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

from tgbot.data.config import get_required_channels, get_admins


class SubscriptionMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        bot: Bot = data.get("bot")
        user_id = data.get("event_from_user").id
        
        if user_id in get_admins():
            return await handler(event, data)
        
        required_channels = get_required_channels()
        
        if not required_channels:
            return await handler(event, data)
        
        unsubscribed_channels = []
        channel_buttons = []
        
        for channel_id in required_channels:
            try:
                member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
                
                if member.status in ['left', 'kicked']:
                    unsubscribed_channels.append(channel_id)
                    
                    try:
                        chat = await bot.get_chat(channel_id)
                        chat_title = chat.title
                        chat_username = chat.username
                        
                        if chat_username:
                            channel_buttons.append([
                                InlineKeyboardButton(
                                    text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {chat_title}",
                                    url=f"https://t.me/{chat_username}"
                                )
                            ])
                        else:
                            invite_link = await bot.create_chat_invite_link(channel_id)
                            channel_buttons.append([
                                InlineKeyboardButton(
                                    text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {chat_title}",
                                    url=invite_link.invite_link
                                )
                            ])
                    except Exception as e:
                        pass
            except Exception as e:
                pass
        
        if unsubscribed_channels:
            channel_buttons.append([
                InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=channel_buttons)
            
            if isinstance(event, Message):
                await event.answer(
                    "‚ö†Ô∏è <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã!</b>\n\n"
                    "üëá <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:</b>\n\n"
                    "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>",
                    reply_markup=keyboard
                )
            elif isinstance(event, CallbackQuery):
                await event.answer(
                    "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã!",
                    show_alert=True
                )
            
            return
        
        return await handler(event, data)
