# - *- coding: utf- 8 - *-
from typing import Union

from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message

from tgbot.database.db_payments import Paymentsx
from tgbot.database.db_refill import Refillx
from tgbot.database.db_settings import Settingsx
from tgbot.database.db_users import Userx
from tgbot.keyboards.inline_user import refill_bill_finl, refill_method_finl, refill_cancel_finl
from tgbot.services.api_qiwi import QiwiAPI
from tgbot.services.api_yoomoney import YoomoneyAPI
from tgbot.services.api_cryptobot import CryptoBotAPI
from tgbot.utils.const_functions import is_number, to_number, gen_id
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import send_admins

min_refill_usd = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö

router = Router(name=__name__)


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(F.data == "user_refill")
async def refill_method(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_payment = Paymentsx.get()

    if get_payment.way_qiwi == "False" and get_payment.way_yoomoney == "False" and get_payment.way_cryptobot == "False":
        return await call.answer("‚ùóÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", True)

    await call.message.edit_text(
        "<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>",
        reply_markup=refill_method_finl(),
    )


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(F.data.startswith("user_refill_method:"))
async def refill_method_select(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    pay_method = call.data.split(":")[1]

    await state.update_data(here_pay_method=pay_method)

    await state.set_state("here_refill_amount")
    await call.message.edit_text(
        "<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
        f"‚ñ™Ô∏è –ú–∏–Ω–∏–º—É–º: <code>${min_refill_usd}</code>\n"
        f"‚ñ™Ô∏è –ú–∞–∫—Å–∏–º—É–º: <code>$100,000</code>",
        reply_markup=refill_cancel_finl()
    )


################################################################################
################################### –í–í–û–î –°–£–ú–ú–´ #################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
@router.message(F.text, StateFilter("here_refill_amount"))
async def refill_amount_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    if not is_number(message.text):
        return await message.answer(
            "<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤",
        )

    if to_number(message.text) < min_refill_usd or to_number(message.text) > 100_000:
        return await message.answer(
            f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
            f"‚ùóÔ∏è C—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ <code>${min_refill_usd}</code> –∏ –±–æ–ª—å—à–µ <code>$100 000</code>\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤",
        )

    cache_message = await message.answer("<b>‚ôªÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–ª–∞—Ç—ë–∂ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>")

    pay_amount = to_number(message.text)
    pay_method = (await state.get_data())['here_pay_method']
    await state.clear()

    if pay_method == "QIWI":
        bill_message, bill_link, bill_receipt = await (
            QiwiAPI(
                bot=bot,
                arSession=arSession,
            )
        ).bill(pay_amount)
    elif pay_method == "Yoomoney":
        bill_message, bill_link, bill_receipt = await (
            YoomoneyAPI(
                bot=bot,
                arSession=arSession,
            )
        ).bill(pay_amount)
    elif pay_method == "CryptoBot":
        get_settings = Settingsx.get()
        stars_markup = get_settings.stars_markup
        
        bill_message, bill_link, bill_receipt = await (
            CryptoBotAPI(
                bot=bot,
                arSession=arSession,
            )
        ).bill(pay_amount, stars_markup=stars_markup)

    if bill_message:
        await cache_message.edit_text(
            bill_message,
            reply_markup=refill_bill_finl(bill_link, bill_receipt, pay_method),
        )


################################################################################
############################### –ü–û–ö–£–ü–ö–ê –ó–í–ï–ó–î ##################################
STAR_RATE = 0.018

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–≤–µ–∑–¥
@router.callback_query(F.data.startswith("stars_recipient:"))
async def stars_recipient_select(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.keyboards.inline_user import stars_confirm_finl
    from tgbot.utils.const_functions import ded
    
    parts = call.data.split(":")
    recipient_type = parts[1]
    amount_stars = int(parts[2])
    
    get_settings = Settingsx.get()
    
    base_amount = round(amount_stars * STAR_RATE, 2)
    markup_amount = round(base_amount * get_settings.stars_markup / 100, 2)
    total_amount = round(base_amount + markup_amount, 2)
    
    if recipient_type == "self":
        await call.message.edit_text(
            ded(f"""
                <b>‚≠ê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: <code>{amount_stars} ‚≠ê</code>
                ‚ñ™Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>–í—ã —Å–∞–º–∏</code>
                ‚ñ™Ô∏è –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>${base_amount}</code>
                ‚ñ™Ô∏è –ù–∞—Ü–µ–Ω–∫–∞ ({get_settings.stars_markup}%): <code>+${markup_amount}</code>
                ‚ñ™Ô∏è –ö –æ–ø–ª–∞—Ç–µ: <code>${total_amount}</code>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ùó –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º —á–µ—Ä–µ–∑ Telegram
            """),
            reply_markup=stars_confirm_finl(amount_stars, recipient_type, None, total_amount)
        )
    else:
        await state.set_state("here_stars_friend_username")
        await state.update_data(amount_stars=amount_stars, recipient_type=recipient_type)
        await call.message.edit_text(
            ded(f"""
                <b>‚≠ê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤–µ–∑–¥ –¥—Ä—É–≥—É</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ Telegram
                ‚ñ™Ô∏è –§–æ—Ä–º–∞—Ç: <code>@username</code> –∏–ª–∏ <code>username</code>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                <i>–ü—Ä–∏–º–µ—Ä: @ivan –∏–ª–∏ ivan</i>
            """)
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –¥—Ä—É–≥–∞
@router.message(F.text, StateFilter("here_stars_friend_username"))
async def stars_friend_username_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.keyboards.inline_user import stars_confirm_finl
    from tgbot.utils.const_functions import ded
    
    username = message.text.strip()
    if username.startswith("@"):
        username = username[1:]
    
    if len(username) < 3:
        return await message.answer(
            "<b>‚ùå Username —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>\n"
            "‚≠ê –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
        )
    
    data = await state.get_data()
    amount_stars = data.get("amount_stars")
    recipient_type = data.get("recipient_type")
    
    await state.clear()
    
    get_settings = Settingsx.get()
    
    base_amount = round(amount_stars * STAR_RATE, 2)
    markup_amount = round(base_amount * get_settings.stars_markup / 100, 2)
    total_amount = round(base_amount + markup_amount, 2)
    
    await message.answer(
        ded(f"""
            <b>‚≠ê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: <code>{amount_stars} ‚≠ê</code>
            ‚ñ™Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>@{username}</code>
            ‚ñ™Ô∏è –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>${base_amount}</code>
            ‚ñ™Ô∏è –ù–∞—Ü–µ–Ω–∫–∞ ({get_settings.stars_markup}%): <code>+${markup_amount}</code>
            ‚ñ™Ô∏è –ö –æ–ø–ª–∞—Ç–µ: <code>${total_amount}</code>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ùó –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}
        """),
        reply_markup=stars_confirm_finl(amount_stars, recipient_type, username, total_amount)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ CryptoBot
@router.callback_query(F.data.startswith("stars_confirm_cryptobot:"))
async def stars_confirm_cryptobot(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.utils.const_functions import ded
    
    parts = call.data.split(":")
    amount_stars = int(parts[1])
    recipient_type = parts[2]
    recipient_username = parts[3] if len(parts) > 3 and parts[3] != "none" else None
    
    cache_message = await call.message.edit_text("<b>‚ôªÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å—á—ë—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>")
    
    get_settings = Settingsx.get()
    stars_markup = get_settings.stars_markup
    
    base_amount = round(amount_stars * STAR_RATE, 2)
    total_amount = round(base_amount * (1 + stars_markup / 100), 2)
    
    bill_message, bill_link, bill_receipt = await (
        CryptoBotAPI(
            bot=bot,
            arSession=arSession,
        )
    ).bill(base_amount, stars_markup=stars_markup)
    
    if bill_message:
        await state.update_data(
            stars_purchase_data={
                "amount_stars": amount_stars,
                "amount_paid": total_amount,
                "recipient_type": recipient_type,
                "recipient_username": recipient_username,
                "markup_percent": stars_markup
            }
        )
        
        await cache_message.edit_text(
            bill_message,
            reply_markup=refill_bill_finl(bill_link, bill_receipt, "CryptoBot_Stars"),
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
@router.callback_query(F.data.startswith("stars_confirm_balance:"))
async def stars_confirm_balance(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.utils.const_functions import ded, get_unix
    from tgbot.database.db_stars_purchases import StarsPurchasex
    
    parts = call.data.split(":")
    amount_stars = int(parts[1])
    recipient_type = parts[2]
    recipient_username = parts[3] if len(parts) > 3 and parts[3] != "none" else None
    
    # –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–µ –¥–æ–≤–µ—Ä—è—è –∫–ª–∏–µ–Ω—Ç—É
    get_settings = Settingsx.get()
    stars_markup = get_settings.stars_markup
    
    base_amount = round(amount_stars * STAR_RATE, 2)
    total_amount = round(base_amount * (1 + stars_markup / 100), 2)
    
    get_user = Userx.get(user_id=call.from_user.id)
    
    if get_user.user_balance < total_amount:
        return await call.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
            f"–£ –≤–∞—Å: ${get_user.user_balance}\n"
            f"–ù—É–∂–Ω–æ: ${total_amount}",
            show_alert=True
        )
    
    await call.message.edit_text("<b>‚ôªÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É...</b>")
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    new_balance = round(get_user.user_balance - total_amount, 2)
    Userx.update(
        user_id=call.from_user.id,
        user_balance=new_balance
    )
    
    receipt = f"BALANCE_{gen_id()}"
    
    if recipient_type == "self":
        recipient_user_id = call.from_user.id
        recipient_username_db = "self"
    else:
        try:
            recipient_chat = await bot.get_chat(f"@{recipient_username}")
            recipient_user_id = recipient_chat.id
            recipient_username_db = recipient_username
        except Exception:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            Userx.update(
                user_id=call.from_user.id,
                user_balance=round(get_user.user_balance, 2)
            )
            return await call.message.edit_text(
                f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{recipient_username}</b>\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
            )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π
    StarsPurchasex.add(
        user_id=call.from_user.id,
        recipient_id=recipient_user_id,
        recipient_username=recipient_username_db,
        amount_stars=amount_stars,
        amount_paid=total_amount,
        markup_percent=stars_markup,
        purchase_receipt=receipt,
        purchase_unix=get_unix()
    )
    
    # –ó–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    await credit_stars_to_recipient(
        bot=bot,
        buyer_id=call.from_user.id,
        recipient_id=recipient_user_id,
        amount_stars=amount_stars,
        recipient_username=recipient_username if recipient_type == "friend" else None
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    if recipient_type == "self":
        await call.message.edit_text(
            ded(f"""
                <b>‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{amount_stars} ‚≠ê</code>
                ‚ñ™Ô∏è –û–ø–ª–∞—á–µ–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: <code>${total_amount}</code>
                ‚ñ™Ô∏è –ó–≤–µ–∑–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º
                ‚ñ™Ô∏è –ß–µ–∫: <code>{receipt}</code>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>${new_balance}</code>
            """)
        )
    else:
        await call.message.edit_text(
            ded(f"""
                <b>‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{amount_stars} ‚≠ê</code>
                ‚ñ™Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>@{recipient_username}</code>
                ‚ñ™Ô∏è –û–ø–ª–∞—á–µ–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: <code>${total_amount}</code>
                ‚ñ™Ô∏è –ß–µ–∫: <code>{receipt}</code>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>${new_balance}</code>
            """)
        )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    await send_admins(
        bot,
        f"‚≠ê <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{get_user.user_login}</b> | <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>\n"
        f"‚ñ™Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{amount_stars} ‚≠ê</code>\n"
        f"‚ñ™Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>{'—Å–µ–±–µ' if recipient_type == 'self' else '@' + recipient_username}</code>\n"
        f"‚ñ™Ô∏è –°—É–º–º–∞: <code>${total_amount}</code>\n"
        f"‚ñ™Ô∏è –ß–µ–∫: <code>#{receipt}</code>"
    )


################################################################################
############################## –ó–ê–ß–ò–°–õ–ï–ù–ò–ï –ó–í–ï–ó–î ################################
# –§—É–Ω–∫—Ü–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
async def credit_stars_to_recipient(bot: Bot, buyer_id: int, recipient_id: int, amount_stars: int, recipient_username: str = None):
    """
    –ó–∞—á–∏—Å–ª—è–µ—Ç –∑–≤–µ–∑–¥—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
    –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
    """
    try:
        if recipient_id == buyer_id:
            await bot.send_message(
                recipient_id,
                f"<b>‚≠ê –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount_stars} –∑–≤–µ–∑–¥!</b>\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
            )
        else:
            await bot.send_message(
                recipient_id,
                f"<b>‚≠ê –í–∞–º –ø–æ–¥–∞—Ä–∏–ª–∏ {amount_stars} –∑–≤–µ–∑–¥!</b>\n"
                f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{recipient_username or '–ê–Ω–æ–Ω–∏–º'}"
            )
            await bot.send_message(
                buyer_id,
                f"<b>‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!</b>\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient_username}"
            )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        pass


################################################################################
############################### –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ##############################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã - –ÆMoney
@router.callback_query(F.data.startswith('Pay:Yoomoney'))
async def refill_check_yoomoney(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    pay_way = call.data.split(":")[1]
    pay_receipt = call.data.split(":")[2]

    pay_status, pay_amount = await (
        YoomoneyAPI(
            bot=bot,
            arSession=arSession,
        )
    ).bill_check(pay_receipt)

    if pay_status == 0:
        get_refill = Refillx.get(refill_receipt=pay_receipt)

        if get_refill is None:
            await refill_success(
                bot=bot,
                call=call,
                pay_way=pay_way,
                pay_amount=pay_amount,
                pay_receipt=pay_receipt,
                pay_comment=pay_receipt,
            )
        else:
            await call.answer("‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", True, cache_time=60)
    elif pay_status == 1:
        await call.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", True, cache_time=5)
    elif pay_status == 2:
        await call.answer("‚ùóÔ∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", True, cache_time=5)
    elif pay_status == 3:
        await call.answer("‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö", True, cache_time=5)
    else:
        await call.answer(f"‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ {pay_status}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", True, cache_time=5)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã - QIWI
@router.callback_query(F.data.startswith('Pay:QIWI'))
async def refill_check_qiwi(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    pay_way = call.data.split(":")[1]
    pay_receipt = call.data.split(":")[2]

    pay_status, pay_amount = await (
        QiwiAPI(
            bot=bot,
            arSession=arSession,
        )
    ).bill_check(pay_receipt)

    if pay_status == 0:
        get_refill = Refillx.get(refill_receipt=pay_receipt)

        if get_refill is None:
            await refill_success(
                bot=bot,
                call=call,
                pay_way=pay_way,
                pay_amount=pay_amount,
                pay_receipt=pay_receipt,
                pay_comment=pay_receipt,
            )
        else:
            await call.answer("‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", True, cache_time=60)
    elif pay_status == 1:
        await call.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", True, cache_time=5)
    elif pay_status == 2:
        await call.answer("‚ùó –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", True, cache_time=5)
    elif pay_status == 3:
        await call.answer("‚ùó –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.", True, cache_time=5)
    else:
        await call.answer(f"‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ {pay_status}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", True, cache_time=5)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã - CryptoBot
@router.callback_query(F.data.startswith('Pay:CryptoBot'))
async def refill_check_cryptobot(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    parts = call.data.split(":")
    pay_way = parts[1]
    pay_receipt = parts[2]
    
    is_stars_payment = pay_way == "CryptoBot_Stars"

    pay_status, pay_amount = await (
        CryptoBotAPI(
            bot=bot,
            arSession=arSession,
        )
    ).bill_check(pay_receipt)

    if pay_status == 0:
        if is_stars_payment:
            from tgbot.database.db_stars_purchases import StarsPurchasex
            from tgbot.utils.const_functions import get_unix
            
            get_stars_purchase = StarsPurchasex.get(purchase_receipt=pay_receipt)
            
            if get_stars_purchase is None:
                data = await state.get_data()
                stars_data = data.get("stars_purchase_data", {})
                
                amount_stars = stars_data.get("amount_stars", 0)
                amount_paid = stars_data.get("amount_paid", 0)
                recipient_type = stars_data.get("recipient_type", "self")
                recipient_username = stars_data.get("recipient_username", "self")
                markup_percent = stars_data.get("markup_percent", 0)
                
                recipient_id = call.from_user.id
                if recipient_username and recipient_username != "self":
                    try:
                        recipient_chat = await bot.get_chat(f"@{recipient_username}")
                        recipient_id = recipient_chat.id
                    except:
                        recipient_id = 0
                
                StarsPurchasex.add(
                    user_id=call.from_user.id,
                    recipient_id=recipient_id,
                    recipient_username=recipient_username if recipient_username else "self",
                    amount_stars=amount_stars,
                    amount_paid=amount_paid,
                    markup_percent=markup_percent,
                    purchase_receipt=pay_receipt,
                    purchase_unix=get_unix()
                )
                
                # –ó–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                await credit_stars_to_recipient(
                    bot=bot,
                    buyer_id=call.from_user.id,
                    recipient_id=recipient_id,
                    amount_stars=amount_stars,
                    recipient_username=recipient_username if recipient_type == "friend" else None
                )
                
                await state.clear()
                
                get_user = Userx.get(user_id=call.from_user.id)
                
                if recipient_type == "self":
                    recipient_text = "–≤–∞–º"
                else:
                    recipient_text = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}"
                
                await call.message.edit_text(
                    f"<b>‚≠ê –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"‚ñ™Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: <code>{amount_stars} ‚≠ê</code>\n"
                    f"‚ñ™Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>{recipient_text}</code>\n"
                    f"‚ñ™Ô∏è –û–ø–ª–∞—á–µ–Ω–æ: <code>${amount_paid}</code>\n"
                    f"‚ñ™Ô∏è –ß–µ–∫: <code>#{pay_receipt}</code>\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"‚úÖ –ó–≤–µ–∑–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {recipient_text}!",
                )
                
                await send_admins(
                    bot,
                    f"‚≠ê <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{get_user.user_login}</b> | <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>\n"
                    f"‚ñ™Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{amount_stars} ‚≠ê</code>\n"
                    f"‚ñ™Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>{recipient_text}</code>\n"
                    f"‚ñ™Ô∏è –°—É–º–º–∞: <code>${amount_paid}</code>\n"
                    f"‚ñ™Ô∏è –ß–µ–∫: <code>#{pay_receipt}</code>"
                )
            else:
                await call.answer("‚ùó –≠—Ç–∞ –ø–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞.", True, cache_time=60)
        else:
            get_refill = Refillx.get(refill_receipt=pay_receipt)

            if get_refill is None:
                await refill_success(
                    bot=bot,
                    call=call,
                    pay_way=pay_way.replace("_Stars", ""),
                    pay_amount=pay_amount,
                    pay_receipt=pay_receipt,
                    pay_comment=pay_receipt,
                )
            else:
                await call.answer("‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", True, cache_time=60)
    elif pay_status == 1:
        await call.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", True, cache_time=5)
    elif pay_status == 2:
        await call.answer("‚ùó –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", True, cache_time=5)
    elif pay_status == 3:
        await call.answer("‚ùó –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ.", True, cache_time=5)
    else:
        await call.answer(f"‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ {pay_status}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", True, cache_time=5)


################################################################################
#################################### –ü–†–û–ß–ï–ï ####################################
# –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
async def refill_success(
        bot: Bot,
        call: CallbackQuery,
        pay_way: str,
        pay_amount: float,
        pay_receipt: Union[str, int] = None,
        pay_comment: str = None,
):
    get_user = Userx.get(user_id=call.from_user.id)

    if pay_receipt is None:
        pay_receipt = gen_id()
    if pay_comment is None:
        pay_comment = ""

    Refillx.add(
        user_id=get_user.user_id,
        refill_comment=pay_comment,
        refill_amount=pay_amount,
        refill_receipt=pay_receipt,
        refill_method=pay_way,
    )

    Userx.update(
        call.from_user.id,
        user_balance=round(get_user.user_balance + pay_amount, 2),
        user_refill=round(get_user.user_refill + pay_amount, 2),
    )

    await call.message.edit_text(
        f"<b>üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>${pay_amount}</code>. –£–¥–∞—á–∏ ‚ù§Ô∏è\n"
        f"üßæ –ß–µ–∫: <code>#{pay_receipt}</code></b>",
    )

    await send_admins(
        bot,
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{get_user.user_login}</b> | <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a> | <code>{get_user.user_id}</code>\n"
        f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>${pay_amount}</code>\n"
        f"üßæ –ß–µ–∫: <code>#{pay_receipt}</code>"
    )
