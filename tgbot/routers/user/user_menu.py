# - *- coding: utf- 8 - *-
import asyncio

from aiogram import Router, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.types import CallbackQuery, Message

from tgbot.data.config import BOT_VERSION, get_desc
from tgbot.database.db_purchases import Purchasesx
from tgbot.database.db_settings import Settingsx
from tgbot.keyboards.inline_user import user_support_finl
from tgbot.keyboards.inline_user_page import *
from tgbot.utils.const_functions import ded, del_message, convert_date
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import upload_text, insert_tags, get_items_available
from tgbot.utils.text_functions import open_profile_user

router = Router(name=__name__)


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@router.message(F.text == "üéÅ –ö—É–ø–∏—Ç—å")
async def user_shop(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
            reply_markup=prod_item_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>üéÅ –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def user_profile(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await open_profile_user(bot, message.from_user.id)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
@router.message(F.text == "üßÆ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
async def user_available(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    items_available = get_items_available()

    await message.answer(
        items_available[0],
        reply_markup=prod_available_swipe_fp(0, len(items_available)),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ FAQ
@router.message(F.text.in_(('‚ùî FAQ', '/faq')))
async def user_faq(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_settings = Settingsx.get()
    send_message = get_settings.misc_faq

    if send_message == "None":
        send_message = ded(f"""
            ‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            {get_desc()}
        """)

    await message.answer(
        insert_tags(message.from_user.id, send_message),
        disable_web_page_preview=True,
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@router.message(F.text.in_(('‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞', '/support')))
async def user_support(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_settings = Settingsx.get()

    if get_settings.misc_support == "None":
        return await message.answer(
            ded(f"""
                ‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                {get_desc()}
            """),
            disable_web_page_preview=True,
        )

    await message.answer(
        "<b>‚òéÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>",
        reply_markup=user_support_finl(get_settings.misc_support),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
@router.message(F.text == 'üí¨ –ß–∞—Ç')
async def user_chat(message: Message, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.data.config import get_chat_url
    from tgbot.keyboards.inline_user import chat_link_finl
    
    await state.clear()
    
    chat_url = get_chat_url()
    
    if not chat_url:
        return await message.answer(
            "<b>üí¨ –ß–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.</b>\n"
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if chat_url.startswith('@'):
        display_url = f"https://t.me/{chat_url[1:]}"
    elif chat_url.startswith('https://'):
        display_url = chat_url
    else:
        display_url = f"https://t.me/{chat_url}"


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –∏–≥—Ä–∞–º–∏
@router.message(F.text == 'üéÆ –ò–≥—Ä—ã –Ω–∞ –∑–≤–µ–∑–¥—ã')
async def user_games_channel(message: Message, bot: Bot, state: FSM):
    from tgbot.data.config import get_games_url
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    await state.clear()
    
    games_url = get_games_url()
    
    if not games_url:
        return await message.answer(
            "<b>üéÆ –ö–∞–Ω–∞–ª —Å –∏–≥—Ä–∞–º–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.</b>\n"
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        )
    
    if games_url.startswith('@'):
        display_url = f"https://t.me/{games_url[1:]}"
    elif games_url.startswith('https://'):
        display_url = games_url
    else:
        display_url = f"https://t.me/{games_url}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=display_url)]
    ])
    
    await message.answer(
        "<b>üéÆ –ò–≥—Ä—ã –Ω–∞ –∑–≤–µ–∑–¥—ã</b>\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –∏–≥—Ä–∞–º–∏ –Ω–∞ –∑–≤–µ–∑–¥—ã Telegram!",
        reply_markup=keyboard
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
@router.message(F.text == 'üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤–µ–∑–¥—ã')
async def user_gifts_channel(message: Message, bot: Bot, state: FSM):
    from tgbot.data.config import get_free_gifts_url
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    await state.clear()
    
    gifts_url = get_free_gifts_url()
    
    if not gifts_url:
        return await message.answer(
            "<b>üéÅ –ö–∞–Ω–∞–ª —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.</b>\n"
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        )
    
    if gifts_url.startswith('@'):
        display_url = f"https://t.me/{gifts_url[1:]}"
    elif gifts_url.startswith('https://'):
        display_url = gifts_url
    else:
        display_url = f"https://t.me/{gifts_url}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=display_url)]
    ])
    
    await message.answer(
        "<b>üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤–µ–∑–¥—ã</b>\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤–µ–∑–¥—ã!",
        reply_markup=keyboard
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
@router.message(F.text == 'üéÅ –ë–æ–Ω—É—Å')
async def user_daily_bonus(message: Message, bot: Bot, state: FSM, arSession: ARS):
    import random
    from tgbot.database.db_users import Userx
    from tgbot.utils.const_functions import get_unix
    
    await state.clear()
    
    user_id = message.from_user.id
    get_user = Userx.get(user_id=user_id)
    
    if not get_user:
        return await message.answer("<b>‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>")
    
    current_time = get_unix()
    time_since_last_bonus = current_time - get_user.user_last_bonus
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
    if time_since_last_bonus < 86400 and get_user.user_last_bonus != 0:
        remaining_time = 86400 - time_since_last_bonus
        hours = remaining_time // 3600
        minutes = (remaining_time % 3600) // 60
        
        return await message.answer(
            f"<b>‚è≥ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: <code>{hours}—á {minutes}–º–∏–Ω</code>"
        )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç 0.50$ –¥–æ 1.00$
    bonus_amount = round(random.uniform(0.50, 1.00), 2)
    
    # –ó–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å
    new_balance = get_user.user_balance + bonus_amount
    Userx.update(user_id, user_balance=new_balance, user_last_bonus=current_time)
    
    await message.answer(
        f"<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
        f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: <code>${bonus_amount}</code>\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>${new_balance:.2f}</code>\n\n"
        f"<i>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!</i>"
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞
@router.message(Command(commands=['version']))
async def admin_version(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(f"<b>‚ùáÔ∏è –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: <code>{BOT_VERSION}</code></b>")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
@router.message(Command(commands=['dj_desc']))
async def admin_desc(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(get_desc(), disable_web_page_preview=True)


################################################################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@router.callback_query(F.data == "user_profile")
async def user_profile_return(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await del_message(call.message)
    await open_profile_user(bot, call.from_user.id)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@router.callback_query(F.data == "user_purchases")
async def user_purchases(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_purchases = Purchasesx.gets(user_id=call.from_user.id)
    get_purchases = get_purchases[-5:]

    if len(get_purchases) >= 1:
        await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫")
        await del_message(call.message)

        for purchase in get_purchases:
            link_items = await upload_text(arSession, purchase.purchase_data)

            await call.message.answer(
                ded(f"""
                    <b>üßæ –ß–µ–∫: <code>#{purchase.purchase_receipt}</code></b>
                    ‚ñ™Ô∏è –¢–æ–≤–∞—Ä: <code>{purchase.purchase_position_name} | {purchase.purchase_count}—à—Ç | {purchase.purchase_price}$</code>
                    ‚ñ™Ô∏è –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{convert_date(purchase.purchase_unix)}</code>
                    ‚ñ™Ô∏è –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
                """)
            )

            await asyncio.sleep(0.2)

        await open_profile_user(bot, call.from_user.id)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data.startswith("user_available_swipe:"))
async def user_available_swipe(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    remover = int(call.data.split(":")[1])

    items_available = get_items_available()

    if remover >= len(items_available):
        remover = len(items_available) - 1
    if remover < 0:
        remover = 0

    await call.message.edit_text(
        items_available[remover],
        reply_markup=prod_available_swipe_fp(remover, len(items_available)),
    )


################################################################################
# –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ Telegram
@router.message(F.text == "‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã")
async def user_buy_stars(message: Message, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.keyboards.inline_user import stars_package_finl
    
    await state.clear()

    get_settings = Settingsx.get()
    STAR_RATE = 0.018
    
    await message.answer(
        ded(f"""
            <b>‚≠ê –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ Telegram</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            ‚ñ™Ô∏è –ú–∏–Ω–∏–º—É–º: <code>50 –∑–≤–µ–∑–¥</code>
            ‚ñ™Ô∏è –ö—É—Ä—Å: <code>1 –∑–≤–µ–∑–¥–∞ ‚âà ${STAR_RATE}</code>
            ‚ñ™Ô∏è –¢–µ–∫—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: <code>{get_settings.stars_markup}%</code>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            <i>–ü—Ä–∏–º–µ—Ä: 100 –∑–≤–µ–∑–¥ = ${100 * STAR_RATE:.2f}
            –° –Ω–∞—Ü–µ–Ω–∫–æ–π {get_settings.stars_markup}%: ${100 * STAR_RATE * (1 + get_settings.stars_markup / 100):.2f}</i>
        """),
        reply_markup=stars_package_finl()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥
@router.callback_query(F.data.startswith("stars_package:"))
async def stars_package_select(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.keyboards.inline_user import stars_recipient_finl, stars_package_finl
    
    package = call.data.split(":")[1]
    
    if package == "custom":
        await state.set_state("here_stars_custom_amount")
        await call.message.edit_text(
            ded(f"""
                <b>‚≠ê –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                ‚ñ™Ô∏è –ú–∏–Ω–∏–º—É–º: <code>50 –∑–≤–µ–∑–¥</code>
                ‚ñ™Ô∏è –ú–∞–∫—Å–∏–º—É–º: <code>10 000 –∑–≤–µ–∑–¥</code>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                <i>–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>
            """)
        )
    else:
        amount_stars = int(package)
        await call.message.edit_text(
            ded(f"""
                <b>‚≠ê –í—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç: {amount_stars} –∑–≤–µ–∑–¥</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã?
            """),
            reply_markup=stars_recipient_finl(amount_stars)
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
@router.message(F.text, StateFilter("here_stars_custom_amount"))
async def stars_custom_amount_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.keyboards.inline_user import stars_recipient_finl, stars_package_finl
    from tgbot.utils.const_functions import is_number, to_number
    
    if not is_number(message.text):
        return await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥</b>\n"
            "‚≠ê –ü—Ä–∏–º–µ—Ä: <code>100</code>"
        )
    
    amount_stars = int(to_number(message.text))
    
    if amount_stars < 50:
        return await message.answer(
            "<b>‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: 50</b>\n"
            "‚≠ê –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 50 –¥–æ 10 000 –∑–≤–µ–∑–¥"
        )
    
    if amount_stars > 10_000:
        return await message.answer(
            "<b>‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: 10 000</b>\n"
            "‚≠ê –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 50 –¥–æ 10 000 –∑–≤–µ–∑–¥"
        )
    
    await state.clear()
    await message.answer(
        ded(f"""
            <b>‚≠ê –í—ã–±—Ä–∞–Ω–æ: {amount_stars} –∑–≤–µ–∑–¥</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã?
        """),
        reply_markup=stars_recipient_finl(amount_stars)
    )


# –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–æ–≤
@router.callback_query(F.data == "stars_back_to_packages")
async def stars_back_to_packages(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.keyboards.inline_user import stars_package_finl
    
    await state.clear()
    get_settings = Settingsx.get()
    STAR_RATE = 0.018
    
    await call.message.edit_text(
        ded(f"""
            <b>‚≠ê –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ Telegram</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            ‚ñ™Ô∏è –ú–∏–Ω–∏–º—É–º: <code>50 –∑–≤–µ–∑–¥</code>
            ‚ñ™Ô∏è –ö—É—Ä—Å: <code>1 –∑–≤–µ–∑–¥–∞ ‚âà ${STAR_RATE}</code>
            ‚ñ™Ô∏è –¢–µ–∫—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: <code>{get_settings.stars_markup}%</code>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            <i>–ü—Ä–∏–º–µ—Ä: 100 –∑–≤–µ–∑–¥ = ${100 * STAR_RATE:.2f}
            –° –Ω–∞—Ü–µ–Ω–∫–æ–π {get_settings.stars_markup}%: ${100 * STAR_RATE * (1 + get_settings.stars_markup / 100):.2f}</i>
        """),
        reply_markup=stars_package_finl()
    )


# –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
@router.callback_query(F.data == "stars_cancel")
async def stars_cancel(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()
    await call.message.delete()
    await call.message.answer("<b>‚ùå –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.data.config import get_required_channels, get_admins
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    user_id = call.from_user.id
    
    if user_id in get_admins():
        await call.message.delete()
        await call.message.answer("‚úÖ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return
    
    required_channels = get_required_channels()
    
    if not required_channels:
        await call.message.delete()
        await call.message.answer("‚úÖ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    unsubscribed_channels = []
    channel_buttons = []
    
    for channel_id in required_channels:
        try:
            member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            
            if member.status in ['left', 'kicked']:
                unsubscribed_channels.append(channel_id)
                
                try:
                    chat = await bot.get_chat(channel_id)
                    chat_title = chat.title
                    chat_username = chat.username
                    
                    if chat_username:
                        channel_buttons.append([
                            InlineKeyboardButton(
                                text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {chat_title}",
                                url=f"https://t.me/{chat_username}"
                            )
                        ])
                    else:
                        invite_link = await bot.create_chat_invite_link(channel_id)
                        channel_buttons.append([
                            InlineKeyboardButton(
                                text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {chat_title}",
                                url=invite_link.invite_link
                            )
                        ])
                except:
                    pass
        except:
            pass
    
    if unsubscribed_channels:
        channel_buttons.append([
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=channel_buttons)
        
        await call.answer(
            "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
            show_alert=True
        )
        
        await call.message.edit_text(
            "‚ö†Ô∏è <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã!</b>\n\n"
            "üëá <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:</b>\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>",
            reply_markup=keyboard
        )
    else:
        from tgbot.keyboards.reply_main import menu_frep
        
        await call.message.delete()
        await call.message.answer(
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π.\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=menu_frep(user_id)
        )
