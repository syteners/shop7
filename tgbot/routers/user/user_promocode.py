# - *- coding: utf- 8 - *-
from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from tgbot.database.db_promocodes import Promocodex
from tgbot.database.db_users import Userx
from tgbot.keyboards.reply_main import menu_frep
from tgbot.utils.const_functions import get_unix

router = Router(name=__name__)


class PromocodeState(StatesGroup):
    enter_code = State()


@router.message(F.text == "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥")
async def user_promocode_menu(message: Message, state: FSMContext):
    await state.set_state(PromocodeState.enter_code)
    await message.answer(
        "üéüÔ∏è <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n\n"
        "üí° <i>–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ üõí –ö—É–ø–∏—Ç—å.</i>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        reply_markup=menu_frep(message.from_user.id)
    )


@router.message(PromocodeState.enter_code, F.text == "/cancel")
async def promocode_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=menu_frep(message.from_user.id)
    )


@router.message(PromocodeState.enter_code)
async def promocode_activate(message: Message, state: FSMContext, bot: Bot):
    from tgbot.data.config import get_admins
    
    promo_code = message.text.strip().upper()
    user_id = message.from_user.id
    
    promocode = Promocodex.get(promocode=promo_code)
    
    if not promocode:
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=menu_frep(user_id)
        )
        return
    
    user_usage = Promocodex.get_user_usage(promo_code, user_id)
    if user_usage:
        await message.answer(
            "‚ö†Ô∏è <b>–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n"
            "–ö–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=menu_frep(user_id)
        )
        await state.clear()
        return
    
    if promocode.usage_count >= promocode.max_usage:
        await message.answer(
            "‚ö†Ô∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n"
            "–í—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=menu_frep(user_id)
        )
        await state.clear()
        return
    
    get_user = Userx.get(user_id=user_id)
    
    Userx.update(user_id, user_bonus_balance=get_user.user_bonus_balance + promocode.balance)
    
    Promocodex.add_usage(promo_code, user_id)
    Promocodex.update(promo_code, usage_count=promocode.usage_count + 1)
    
    await message.answer(
        f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <code>{promocode.balance}$</code>\n\n"
        f"üìä –í–∞—à —Ç–µ–∫—É—â–∏–π –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <code>{get_user.user_bonus_balance + promocode.balance}$</code>\n\n"
        f"üí° <i>–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ üéÅ –ö—É–ø–∏—Ç—å.</i>",
        reply_markup=menu_frep(user_id)
    )
    
    for admin in get_admins():
        try:
            await bot.send_message(
                admin,
                f"üéüÔ∏è <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{message.from_user.full_name}</a>\n"
                f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n"
                f"üí∞ –°—É–º–º–∞: <code>{promocode.balance}$</code>\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {promocode.usage_count + 1}/{promocode.max_usage}"
            )
        except:
            pass
    
    await state.clear()


@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery):
    await callback.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏...", show_alert=False)
    await callback.message.delete()
