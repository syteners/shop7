# - *- coding: utf- 8 - *-
import string
import random
from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from tgbot.database.db_promocodes import Promocodex
from tgbot.keyboards.inline_promocode import (
    promocode_admin_keyboard,
    promocode_usage_type_keyboard,
    promocode_list_keyboard,
    promocode_info_keyboard
)
from tgbot.keyboards.reply_main import settings_frep
from tgbot.utils.const_functions import get_unix

router = Router(name=__name__)


class PromocodeAdminState(StatesGroup):
    enter_balance = State()
    enter_usage = State()


@router.message(F.text == "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def admin_promocodes_menu(message: Message):
    await message.answer(
        "üéüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=promocode_admin_keyboard()
    )


@router.callback_query(F.data == "admin_promocodes")
async def admin_promocodes_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üéüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=promocode_admin_keyboard()
    )


@router.callback_query(F.data == "admin_create_promocode")
async def admin_create_promocode(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PromocodeAdminState.enter_balance)
    await callback.message.edit_text(
        "üí∞ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>100</code> –∏–ª–∏ <code>50.5</code>",
        reply_markup=None
    )


@router.message(PromocodeAdminState.enter_balance)
async def promocode_enter_balance(message: Message, state: FSMContext):
    try:
        balance = float(message.text.strip())
        
        if balance <= 0:
            await message.answer(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        await state.update_data(balance=balance)
        await state.set_state(PromocodeAdminState.enter_usage)
        
        await message.answer(
            f"üí∞ –°—É–º–º–∞: <code>{balance}$</code>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
            reply_markup=promocode_usage_type_keyboard()
        )
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>100</code> –∏–ª–∏ <code>50.5</code>"
        )


@router.callback_query(F.data.startswith("promo_usage:"))
async def promocode_set_usage(callback: CallbackQuery, state: FSMContext):
    max_usage = int(callback.data.split(":")[1])
    
    data = await state.get_data()
    balance = data.get("balance")
    
    promo_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    
    while Promocodex.get(promocode=promo_code):
        promo_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    
    Promocodex.add(
        promocode=promo_code,
        balance=balance,
        max_usage=max_usage,
        created_by=callback.from_user.id
    )
    
    usage_text = str(max_usage)
    if max_usage == 999999:
        usage_text = "‚àû"
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n"
        f"üí∞ –°—É–º–º–∞: <code>{balance}$</code>\n"
        f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {usage_text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
        reply_markup=promocode_admin_keyboard()
    )
    
    await state.clear()


@router.callback_query(F.data == "admin_list_promocodes")
async def admin_list_promocodes(callback: CallbackQuery):
    promocodes = Promocodex.get_all()
    
    if not promocodes:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=promocode_admin_keyboard()
        )
        return
    
    promocodes.sort(key=lambda x: x.created_unix, reverse=True)
    
    await callback.message.edit_text(
        f"üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(promocodes)}",
        reply_markup=promocode_list_keyboard(promocodes, 0)
    )


@router.callback_query(F.data.startswith("promo_page:"))
async def promocode_page(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    promocodes = Promocodex.get_all()
    promocodes.sort(key=lambda x: x.created_unix, reverse=True)
    
    await callback.message.edit_text(
        f"üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(promocodes)}",
        reply_markup=promocode_list_keyboard(promocodes, page)
    )


@router.callback_query(F.data.startswith("promo_info:"))
async def promocode_info(callback: CallbackQuery):
    promo_code = callback.data.split(":")[1]
    promocode = Promocodex.get(promocode=promo_code)
    
    if not promocode:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    usage_text = f"{promocode.usage_count}/{promocode.max_usage}"
    if promocode.max_usage == 999999:
        usage_text = f"{promocode.usage_count}/‚àû"
    
    await callback.message.edit_text(
        f"üéüÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ</b>\n\n"
        f"–ö–æ–¥: <code>{promocode.promocode}</code>\n"
        f"üí∞ –°—É–º–º–∞: <code>{promocode.balance}$</code>\n"
        f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_text}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {promocode.created_unix}",
        reply_markup=promocode_info_keyboard(promo_code)
    )


@router.callback_query(F.data.startswith("promo_delete:"))
async def promocode_delete(callback: CallbackQuery):
    promo_code = callback.data.split(":")[1]
    
    Promocodex.delete(promocode=promo_code)
    
    await callback.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω!", show_alert=True)
    await callback.message.edit_text(
        "‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>",
        reply_markup=promocode_admin_keyboard()
    )
